// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: nanopb.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Custom options for defining:
// - Maximum size of string/bytes
// - Maximum number of elements in array
//
// These are used by nanopb to generate statically allocable structures
// for memory-limited environments.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum FieldType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Automatically decide field type, generate static field if possible.
  case ftDefault // = 0

  /// Always generate a callback field.
  case ftCallback // = 1

  /// Always generate a dynamically allocated field.
  case ftPointer // = 4

  /// Generate a static field or raise an exception if not possible.
  case ftStatic // = 2

  /// Ignore the field completely.
  case ftIgnore // = 3

  /// Legacy option, use the separate 'fixed_length' option instead
  case ftInline // = 5

  init() {
    self = .ftDefault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ftDefault
    case 1: self = .ftCallback
    case 2: self = .ftStatic
    case 3: self = .ftIgnore
    case 4: self = .ftPointer
    case 5: self = .ftInline
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .ftDefault: return 0
    case .ftCallback: return 1
    case .ftStatic: return 2
    case .ftIgnore: return 3
    case .ftPointer: return 4
    case .ftInline: return 5
    }
  }

}

enum IntSize: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Default, 32/64bit based on type in .proto
  case isDefault // = 0
  case is8 // = 8
  case is16 // = 16
  case is32 // = 32
  case is64 // = 64

  init() {
    self = .isDefault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .isDefault
    case 8: self = .is8
    case 16: self = .is16
    case 32: self = .is32
    case 64: self = .is64
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .isDefault: return 0
    case .is8: return 8
    case .is16: return 16
    case .is32: return 32
    case .is64: return 64
    }
  }

}

/// This is the inner options message, which basically defines options for
/// a field. When it is used in message or file scope, it applies to all
/// fields.
struct NanoPBOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Allocated size for 'bytes' and 'string' fields.
  /// For string fields, this should include the space for null terminator.
  var maxSize: Int32 {
    get {return _maxSize ?? 0}
    set {_maxSize = newValue}
  }
  /// Returns true if `maxSize` has been explicitly set.
  var hasMaxSize: Bool {return self._maxSize != nil}
  /// Clears the value of `maxSize`. Subsequent reads from it will return its default value.
  mutating func clearMaxSize() {self._maxSize = nil}

  /// Maximum length for 'string' fields. Setting this is equivalent
  /// to setting max_size to a value of length+1.
  var maxLength: Int32 {
    get {return _maxLength ?? 0}
    set {_maxLength = newValue}
  }
  /// Returns true if `maxLength` has been explicitly set.
  var hasMaxLength: Bool {return self._maxLength != nil}
  /// Clears the value of `maxLength`. Subsequent reads from it will return its default value.
  mutating func clearMaxLength() {self._maxLength = nil}

  /// Allocated number of entries in arrays ('repeated' fields)
  var maxCount: Int32 {
    get {return _maxCount ?? 0}
    set {_maxCount = newValue}
  }
  /// Returns true if `maxCount` has been explicitly set.
  var hasMaxCount: Bool {return self._maxCount != nil}
  /// Clears the value of `maxCount`. Subsequent reads from it will return its default value.
  mutating func clearMaxCount() {self._maxCount = nil}

  /// Size of integer fields. Can save some memory if you don't need
  /// full 32 bits for the value.
  var intSize: IntSize {
    get {return _intSize ?? .isDefault}
    set {_intSize = newValue}
  }
  /// Returns true if `intSize` has been explicitly set.
  var hasIntSize: Bool {return self._intSize != nil}
  /// Clears the value of `intSize`. Subsequent reads from it will return its default value.
  mutating func clearIntSize() {self._intSize = nil}

  /// Force type of field (callback or static allocation)
  var type: FieldType {
    get {return _type ?? .ftDefault}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  /// Use long names for enums, i.e. EnumName_EnumValue.
  var longNames: Bool {
    get {return _longNames ?? true}
    set {_longNames = newValue}
  }
  /// Returns true if `longNames` has been explicitly set.
  var hasLongNames: Bool {return self._longNames != nil}
  /// Clears the value of `longNames`. Subsequent reads from it will return its default value.
  mutating func clearLongNames() {self._longNames = nil}

  /// Add 'packed' attribute to generated structs.
  /// Note: this cannot be used on CPUs that break on unaligned
  /// accesses to variables.
  var packedStruct: Bool {
    get {return _packedStruct ?? false}
    set {_packedStruct = newValue}
  }
  /// Returns true if `packedStruct` has been explicitly set.
  var hasPackedStruct: Bool {return self._packedStruct != nil}
  /// Clears the value of `packedStruct`. Subsequent reads from it will return its default value.
  mutating func clearPackedStruct() {self._packedStruct = nil}

  /// Add 'packed' attribute to generated enums.
  var packedEnum: Bool {
    get {return _packedEnum ?? false}
    set {_packedEnum = newValue}
  }
  /// Returns true if `packedEnum` has been explicitly set.
  var hasPackedEnum: Bool {return self._packedEnum != nil}
  /// Clears the value of `packedEnum`. Subsequent reads from it will return its default value.
  mutating func clearPackedEnum() {self._packedEnum = nil}

  /// Skip this message
  var skipMessage: Bool {
    get {return _skipMessage ?? false}
    set {_skipMessage = newValue}
  }
  /// Returns true if `skipMessage` has been explicitly set.
  var hasSkipMessage: Bool {return self._skipMessage != nil}
  /// Clears the value of `skipMessage`. Subsequent reads from it will return its default value.
  mutating func clearSkipMessage() {self._skipMessage = nil}

  /// Generate oneof fields as normal optional fields instead of union.
  var noUnions: Bool {
    get {return _noUnions ?? false}
    set {_noUnions = newValue}
  }
  /// Returns true if `noUnions` has been explicitly set.
  var hasNoUnions: Bool {return self._noUnions != nil}
  /// Clears the value of `noUnions`. Subsequent reads from it will return its default value.
  mutating func clearNoUnions() {self._noUnions = nil}

  /// integer type tag for a message
  var msgid: UInt32 {
    get {return _msgid ?? 0}
    set {_msgid = newValue}
  }
  /// Returns true if `msgid` has been explicitly set.
  var hasMsgid: Bool {return self._msgid != nil}
  /// Clears the value of `msgid`. Subsequent reads from it will return its default value.
  mutating func clearMsgid() {self._msgid = nil}

  /// decode oneof as anonymous union
  var anonymousOneof: Bool {
    get {return _anonymousOneof ?? false}
    set {_anonymousOneof = newValue}
  }
  /// Returns true if `anonymousOneof` has been explicitly set.
  var hasAnonymousOneof: Bool {return self._anonymousOneof != nil}
  /// Clears the value of `anonymousOneof`. Subsequent reads from it will return its default value.
  mutating func clearAnonymousOneof() {self._anonymousOneof = nil}

  /// Proto3 singular field does not generate a "has_" flag
  var proto3: Bool {
    get {return _proto3 ?? false}
    set {_proto3 = newValue}
  }
  /// Returns true if `proto3` has been explicitly set.
  var hasProto3: Bool {return self._proto3 != nil}
  /// Clears the value of `proto3`. Subsequent reads from it will return its default value.
  mutating func clearProto3() {self._proto3 = nil}

  /// Generate an enum->string mapping function (can take up lots of space).
  var enumToString: Bool {
    get {return _enumToString ?? false}
    set {_enumToString = newValue}
  }
  /// Returns true if `enumToString` has been explicitly set.
  var hasEnumToString: Bool {return self._enumToString != nil}
  /// Clears the value of `enumToString`. Subsequent reads from it will return its default value.
  mutating func clearEnumToString() {self._enumToString = nil}

  /// Generate bytes arrays with fixed length
  var fixedLength: Bool {
    get {return _fixedLength ?? false}
    set {_fixedLength = newValue}
  }
  /// Returns true if `fixedLength` has been explicitly set.
  var hasFixedLength: Bool {return self._fixedLength != nil}
  /// Clears the value of `fixedLength`. Subsequent reads from it will return its default value.
  mutating func clearFixedLength() {self._fixedLength = nil}

  /// Generate repeated field with fixed count
  var fixedCount: Bool {
    get {return _fixedCount ?? false}
    set {_fixedCount = newValue}
  }
  /// Returns true if `fixedCount` has been explicitly set.
  var hasFixedCount: Bool {return self._fixedCount != nil}
  /// Clears the value of `fixedCount`. Subsequent reads from it will return its default value.
  mutating func clearFixedCount() {self._fixedCount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _maxSize: Int32? = nil
  fileprivate var _maxLength: Int32? = nil
  fileprivate var _maxCount: Int32? = nil
  fileprivate var _intSize: IntSize? = nil
  fileprivate var _type: FieldType? = nil
  fileprivate var _longNames: Bool? = nil
  fileprivate var _packedStruct: Bool? = nil
  fileprivate var _packedEnum: Bool? = nil
  fileprivate var _skipMessage: Bool? = nil
  fileprivate var _noUnions: Bool? = nil
  fileprivate var _msgid: UInt32? = nil
  fileprivate var _anonymousOneof: Bool? = nil
  fileprivate var _proto3: Bool? = nil
  fileprivate var _enumToString: Bool? = nil
  fileprivate var _fixedLength: Bool? = nil
  fileprivate var _fixedCount: Bool? = nil
}

// MARK: - Extension support defined in nanopb.proto.

extension Google_Protobuf_EnumOptions {

  var nanopbEnumopt: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb_enumopt) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb_enumopt, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb_enumopt`
  /// has been explicitly set.
  var hasNanopbEnumopt: Bool {
    return hasExtensionValue(ext: Extensions_nanopb_enumopt)
  }
  /// Clears the value of extension `Extensions_nanopb_enumopt`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopbEnumopt() {
    clearExtensionValue(ext: Extensions_nanopb_enumopt)
  }
}

extension Google_Protobuf_FieldOptions {

  var nanopb: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb`
  /// has been explicitly set.
  var hasNanopb: Bool {
    return hasExtensionValue(ext: Extensions_nanopb)
  }
  /// Clears the value of extension `Extensions_nanopb`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopb() {
    clearExtensionValue(ext: Extensions_nanopb)
  }
}

extension Google_Protobuf_FileOptions {

  var nanopbFileopt: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb_fileopt) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb_fileopt, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb_fileopt`
  /// has been explicitly set.
  var hasNanopbFileopt: Bool {
    return hasExtensionValue(ext: Extensions_nanopb_fileopt)
  }
  /// Clears the value of extension `Extensions_nanopb_fileopt`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopbFileopt() {
    clearExtensionValue(ext: Extensions_nanopb_fileopt)
  }
}

extension Google_Protobuf_MessageOptions {

  var nanopbMsgopt: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb_msgopt) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb_msgopt, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb_msgopt`
  /// has been explicitly set.
  var hasNanopbMsgopt: Bool {
    return hasExtensionValue(ext: Extensions_nanopb_msgopt)
  }
  /// Clears the value of extension `Extensions_nanopb_msgopt`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopbMsgopt() {
    clearExtensionValue(ext: Extensions_nanopb_msgopt)
  }

}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Nanopb_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Extensions_nanopb_fileopt,
  Extensions_nanopb_msgopt,
  Extensions_nanopb_enumopt,
  Extensions_nanopb
]

let Extensions_nanopb_fileopt = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb_fileopt"
)

let Extensions_nanopb_msgopt = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb_msgopt"
)

let Extensions_nanopb_enumopt = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, Google_Protobuf_EnumOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb_enumopt"
)

let Extensions_nanopb = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension FieldType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FT_DEFAULT"),
    1: .same(proto: "FT_CALLBACK"),
    2: .same(proto: "FT_STATIC"),
    3: .same(proto: "FT_IGNORE"),
    4: .same(proto: "FT_POINTER"),
    5: .same(proto: "FT_INLINE"),
  ]
}

extension IntSize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IS_DEFAULT"),
    8: .same(proto: "IS_8"),
    16: .same(proto: "IS_16"),
    32: .same(proto: "IS_32"),
    64: .same(proto: "IS_64"),
  ]
}

extension NanoPBOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NanoPBOptions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_size"),
    14: .standard(proto: "max_length"),
    2: .standard(proto: "max_count"),
    7: .standard(proto: "int_size"),
    3: .same(proto: "type"),
    4: .standard(proto: "long_names"),
    5: .standard(proto: "packed_struct"),
    10: .standard(proto: "packed_enum"),
    6: .standard(proto: "skip_message"),
    8: .standard(proto: "no_unions"),
    9: .same(proto: "msgid"),
    11: .standard(proto: "anonymous_oneof"),
    12: .same(proto: "proto3"),
    13: .standard(proto: "enum_to_string"),
    15: .standard(proto: "fixed_length"),
    16: .standard(proto: "fixed_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._maxSize)
      case 2: try decoder.decodeSingularInt32Field(value: &self._maxCount)
      case 3: try decoder.decodeSingularEnumField(value: &self._type)
      case 4: try decoder.decodeSingularBoolField(value: &self._longNames)
      case 5: try decoder.decodeSingularBoolField(value: &self._packedStruct)
      case 6: try decoder.decodeSingularBoolField(value: &self._skipMessage)
      case 7: try decoder.decodeSingularEnumField(value: &self._intSize)
      case 8: try decoder.decodeSingularBoolField(value: &self._noUnions)
      case 9: try decoder.decodeSingularUInt32Field(value: &self._msgid)
      case 10: try decoder.decodeSingularBoolField(value: &self._packedEnum)
      case 11: try decoder.decodeSingularBoolField(value: &self._anonymousOneof)
      case 12: try decoder.decodeSingularBoolField(value: &self._proto3)
      case 13: try decoder.decodeSingularBoolField(value: &self._enumToString)
      case 14: try decoder.decodeSingularInt32Field(value: &self._maxLength)
      case 15: try decoder.decodeSingularBoolField(value: &self._fixedLength)
      case 16: try decoder.decodeSingularBoolField(value: &self._fixedCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._maxSize {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._maxCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._longNames {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._packedStruct {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._skipMessage {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._intSize {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if let v = self._noUnions {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._msgid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._packedEnum {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._anonymousOneof {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._proto3 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    if let v = self._enumToString {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    }
    if let v = self._maxLength {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
    }
    if let v = self._fixedLength {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    }
    if let v = self._fixedCount {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NanoPBOptions) -> Bool {
    if self._maxSize != other._maxSize {return false}
    if self._maxLength != other._maxLength {return false}
    if self._maxCount != other._maxCount {return false}
    if self._intSize != other._intSize {return false}
    if self._type != other._type {return false}
    if self._longNames != other._longNames {return false}
    if self._packedStruct != other._packedStruct {return false}
    if self._packedEnum != other._packedEnum {return false}
    if self._skipMessage != other._skipMessage {return false}
    if self._noUnions != other._noUnions {return false}
    if self._msgid != other._msgid {return false}
    if self._anonymousOneof != other._anonymousOneof {return false}
    if self._proto3 != other._proto3 {return false}
    if self._enumToString != other._enumToString {return false}
    if self._fixedLength != other._fixedLength {return false}
    if self._fixedCount != other._fixedCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
